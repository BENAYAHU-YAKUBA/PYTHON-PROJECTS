from tkinter import *  # importing classes, funcs and constants not submodules e.g ttk
from datetime import datetime
import json  # to store and access user account balance.

date_and_time = datetime.now()

# Initialize coop_bank_account_balance with a default value for json logic
kshs_account_balance = 0
account_number = ""
usd_account_balance = 0

# Load Balances from JSON Files when Starting:
try:
    with open("Coop_Bank_Balances.json", "r") as json_file:
        data = json.load(json_file)
        account_info = data.get("accounts", {}).get(account_number, None)
        if account_info:
            if account_info["account_type"] == "ksh_account":
                kshs_account_balance = account_info.get("account_balance", None)
            elif account_info["account_type"] == "usd_account":
                usd_account_balance = account_info.get("account_balance", None)
except FileNotFoundError:
    pass  # JSON file doesn't exist, use the default balance


# _______________________________________adding app functions________________________________________________
def load_ksh_balance():
    global kshs_account_balance
    global account_number
    global usd_account_balance
    try:
        account_number = account_entry.get()  # Get the user's account number from the Entry widget
        with open("Coop_Bank_Balances.json", "r") as account_file:
            data = json.load(account_file)
            account_info = data.get("accounts", {}).get(account_number, None)
            if account_info:
                if account_info["account_type"] == "ksh_account":
                    kshs_account_balance = account_info.get("account_balance", None)
                elif account_info["account_type"] == "usd_account":
                    usd_account_balance = account_info.get("account_balance", None)
    except FileNotFoundError:
        pass  # JSON file doesn't exist, use the default balance


def show_usd_balance():
    global usd_account_balance
    global account_number
    try:
        if usd_account_balance is not None:
            show_usd_balance_label.config(text=f"Your USD Balance is:\n{usd_account_balance}")
        else:
            show_usd_balance_label.config(text="USD Account not found")
        root.after(2000, root.destroy)  # Close the window after 2 seconds
    except FileNotFoundError:
        pass  # JSON file doesn't exist, use the default balance


def show_conversion_terminated():
    result_label.config(text="Conversion Terminated")
    root.after(2000, root.destroy)  # Close the window after 2 seconds


def cancel_conversion():
    result_label.config(text="Conversion Cancelled")
    root.after(2000, show_conversion_terminated)


def convert():
    global kshs_account_balance
    global usd_account_balance
    try:
        user_convert_amount = float(amount_entry.get())  # gets the amount entered by the user in the GUI

        if user_convert_amount < 0:
            # Handle negative input
            result_label.config(text="Negative Value Entered\n\nTerminating Conversion...")
            # calling after() - to schedule the execution of a function after a specified time delay(in ms)
            root.after(2000, show_conversion_terminated)
            return
        if user_convert_amount > kshs_account_balance:
            # Handle insufficient balance
            result_label.config(
                text=f"Insufficient Balance\nYour balance is: Kshs.{kshs_account_balance}\n\nTerminating Conversion...")
            root.after(2000, show_conversion_terminated)
            return

        usd_in_kshs = 0.0069
        bank_conversion_rate = 0.043  # bank conversion fee = 1 USD at 0.043USD

        converted_amount = user_convert_amount * usd_in_kshs  # converted_amount in USD

        result_text = f"""
            ___________________________________________________________________________
            COOP-BANK: CONVERSION SUMMARY
            Date: {date_and_time}
            Amount to convert: {round(user_convert_amount, 2)} Kshs
            Amount in USD before conversion fee: {round(converted_amount, 2)} USD
            Coop-Bank USD conversion rate: {bank_conversion_rate}
            ___________________________________________________________________________
            """

        # Handle USD conversion
        bank_conversion_fee_in_usd = bank_conversion_rate * converted_amount
        amount_after_bank_rate = converted_amount - bank_conversion_fee_in_usd

        result_text += f"""
            \t\t\tConversion Successful!\n
            Your account balance in USD:
            {round(amount_after_bank_rate, 2)} USD
            Transaction Date and Time:
            {date_and_time}

            Thank you for banking with us.
            ___________________________________________________________________________
            """

        result_label.config(text=result_text)
        kshs_account_balance -= converted_amount / usd_in_kshs
        usd_account_balance += amount_after_bank_rate

        # Save the kshs_account_balance to a JSON file
        with open("Coop_Bank_Balances.json", "w") as final_json_file:
            data_final = json.load(final_json_file)
            if "ksh_account" in data_final:
                data_final["ksh_account"]["account_number"]["account_balance"] = kshs_account_balance

            if "usd_account" in data_final:
                data_final["usd_account"]["account_number"]["account_balance"] = usd_account_balance

            # Save the updated data back to the JSON file
            with open("Coop_Bank_Balances.json", "w") as update_json_file:
                json.dump(data, update_json_file, indent=4)  # Use indent for pretty formatting (optional)

    except ValueError:
        result_label.config(text="Only Numbers Allowed!!!\n\nTerminating Conversion...")
        root.after(2000, show_conversion_terminated)
        return


# adding button hover functions
def on_convert_hover(event):
    convert_button.config(cursor="hand2")


def on_convert_leave(event):
    convert_button.config(cursor="")


def on_cancel_hover(event):
    cancel_button.config(cursor="hand2")


def on_cancel_leave(event):
    cancel_button.config(cursor="")


# _______________________________________________________GUI CONFIGURATION______________________________________________
# __________________________Main GUI window___________________________________
root = Tk()
root.title("COOP-BANK KSH-USD CONVERSION")
# _____________________________________________________________________________


# adding widgets, labels and fixed grid:
amount_label = Label(root, text="Enter Amount in Kshs to Convert to USD:", fg="white", bg='black', relief="ridge",
                     font=("Helvetica", 9, "bold"))
amount_label.grid(row=0, column=0, columnspan=5)

amount_entry = Entry(root, bg='#B19CD9', bd=3, relief="groove", fg='white', selectbackground='magenta',
                     state=NORMAL)
amount_entry.grid(row=1, column=0, columnspan=2)

# ________conversion menubutton__________
mb = Menubutton(root, text="USD-KSH", relief=GROOVE, background="black", foreground='yellow',
                font=("Helvetica", 9, "bold"))
mb.grid()
mb.menu = Menu(mb, tearoff=0)
mb["menu"] = mb.menu

badilisha = IntVar()
standard = IntVar()

mb.menu.add_checkbutton(label="Badilisha Promo",
                        variable=badilisha, background='#B19CD9')
mb.menu.add_checkbutton(label="Standard Conversion", background='green',
                        variable=standard)

mb.grid(row=1, column=9)
# ________________________________________________
convert_img = PhotoImage(file="tk_convert_button.PNG")  # have this file in your python directory
convert_image = convert_img.subsample(int(convert_img.width() / 35), int(convert_img.height() / 9))  # resizing image
convert_button = Button(root, command=convert, text="Convert", bg="cyan", activebackground="green",
                        fg="black",
                        activeforeground='orange',
                        relief="ridge",  # must be flat, groove, raised, ridge, solid, or sunken
                        image=convert_image  # we will use image, don't add image if you want text
                        )
convert_button.grid(row=2, column=0)

cancel_img = PhotoImage(file="tk_cancel_button.PNG")  # loading image
cancel_image = cancel_img.subsample(int(cancel_img.width() / 30), int(cancel_img.height() / 11))  # resizing image
cancel_button = Button(root, command=cancel_conversion, text="Cancel", bg="yellow", activebackground="red",
                       fg="black",
                       activeforeground='white',  # you can add padx=2, height=1
                       image=cancel_image)
cancel_button.grid(row=2, column=1)

# Bind hover and leave events for Convert and Cancel buttons
convert_button.bind("<Enter>", on_convert_hover)  # The "Enter" and "Leave" events are mouse-related events in Tkinter
convert_button.bind("<Leave>", on_convert_leave)

cancel_button.bind("<Enter>", on_cancel_hover)
cancel_button.bind("<Leave>", on_cancel_leave)

result_label = Label(root, text="", justify=LEFT)
result_label.grid(row=3, column=0, columnspan=2)

# ______________________usd account balance enquiry__________________
balance_check_label = Label(root, text="MY USD WALLET", fg="white", bg='black', relief="ridge",
                            font=("Helvetica", 9, "bold"))
balance_check_label.grid(row=4, column=0, columnspan=5)

account_label = Label(root, text="Enter Account Number:")
account_label.grid(row=5, column=0)

account_entry = Entry(root, bd=3)  # bd=borderwidth
account_entry.grid(row=5, column=1)

account_pw_label = Label(root, text="Enter Password:")
account_pw_label.grid(row=6, column=0)

account_pw_entry = Entry(root, bd=3, show="*")  # bd=borderwidth
account_pw_entry.grid(row=6, column=1)

show_usd_balance_button = Button(root, text="Load Balance", command=show_usd_balance, background='green')
show_usd_balance_button.grid(row=7, column=1)

show_usd_balance_label = Label(root, text="Your USD A/C Balance:")
show_usd_balance_label.grid(row=8, column=0)

# ______________________________________________________________________________________________________________________
"""
#ALTERNATIVE CODE FOR BASIC PACK()
# pack() - used to organize and arrange widgets within a container (typically a frame or the main window)
# pack is flexible but not good for complext GUI designs

amount_label = Label(root, text="Enter amount in Kshs to convert to USD:")
amount_label.pack() 

amount_entry = Entry(root)
amount_entry.pack()

convert_button = Button(root, text="Convert", command=convert)
convert_button.pack(side="left")

cancel_button = Button(root, text="Cancel", command=cancel_conversion)
cancel_button.pack(side="right")

result_label = Label(root, text="", justify=LEFT)  # contents of the result to appear on the left
result_label.pack()
"""
root.mainloop()
