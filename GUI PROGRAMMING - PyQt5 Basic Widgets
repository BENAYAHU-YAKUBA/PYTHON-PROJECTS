import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QLineEdit, QComboBox, QCheckBox, \
    QRadioButton, QSpinBox, QDoubleSpinBox, QSlider, QProgressBar, QTextEdit, QListWidget, QTableWidget, \
    QDateTimeEdit, QPlainTextEdit, QColorDialog, QFileDialog, QMessageBox, QInputDialog, \
    QVBoxLayout, QHBoxLayout, QGridLayout, QFormLayout
from PyQt5.QtWidgets import QFontDialog, QColorDialog, QInputDialog, QStyle
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtWebEngineWidgets import QWebEngineView  # Changed import to use QWebEngineView, WebView is deprecated
# QWebEngineView - embedded web browser that can render HTML, CSS, and JavaScript content.

class Example(QWidget):
    def __init__(self):
        super().__init__()

        self.init_ui()
        self.name = 'This is a message box!'

    def init_ui(self):
        # Create widgets
        button = QPushButton('PushButton')
        button.setToolTip('QPushButton')
        button.setStyleSheet("background-color: green;")

        label = QLabel('QLabel')
        label.setToolTip('QLabel')

        line_edit = QLineEdit()
        line_edit.setToolTip('QLineEdit')
        line_edit.setPlaceholderText("This is a default text set with setPlaceholderText method")
        line_edit.setStyleSheet("background-color: white; color: black;")

        combo_box = QComboBox()
        combo_box.addItems(['Option 1', 'Option 2', 'Option 3'])
        combo_box.setToolTip('QComboBox')
        combo_box.setStyleSheet("background-color: whitesmoke;")

        check_box = QCheckBox('QCheckBox')
        check_box.setChecked(True)
        check_box.setToolTip('QCheckBox with Check set to True')

        radio_button1 = QRadioButton('RadioButton 1')
        radio_button2 = QRadioButton('RadioButton 2')
        radio_button2.setToolTip('QRadioButton')

        spin_box = QSpinBox()
        spin_box.setToolTip('QSpinBox for integers e.g 1, 2, etc')

        double_spin_box = QDoubleSpinBox()
        double_spin_box.setToolTip('QDoubleSpinBox for doubles e.g 1.00, 2.00 etc')

        slider = QSlider()
        slider.setOrientation(1)
        slider.setRange(10, 100)
        slider.setValue(90)
        slider.setToolTip('QSlider with values 10 - 100, initial value is 90')

        progress_bar = QProgressBar()
        progress_bar.setValue(50)
        progress_bar.setToolTip('QProgressBar')

        self.text_edit = QTextEdit()  # Making text_edit an instance variable
        self.text_edit.setToolTip('QTextEdit, use change color and font buttons below')
        self.text_edit.setPlaceholderText("Type your text here...")
        # Buttons to customize text appearance
        font_button = QPushButton("Change Font")
        font_button.setStyleSheet("background-color: grey; color: white;")
        color_button = QPushButton("Change Color")
        color_button.setStyleSheet("background-color: grey; color: white;")

        list_widget = QListWidget()
        list_widget.addItems(['Item 1', 'Item 2', 'Item 3'])
        list_widget.setToolTip('QListWidget used for selection')

        table_widget = QTableWidget(5, 7)
        table_widget.setToolTip('QTableWidget, for table with 7 columns and 5 rows\ncurrent selection is cell D2 '\
                                'indexing starts from 0')
        table_widget.setCurrentCell(1, 3)

        date_time_edit = QDateTimeEdit()
        date_time_edit.setToolTip('QDateTimeEdit')

        plain_text_edit = QPlainTextEdit()
        plain_text_edit.setToolTip('QPlainTextEdit')
        plain_text_edit.setPlaceholderText(f"""
                QLineEdit is for single-line text input(allows editing), 
                QTextEdit is for rich text editing(allows formating), and
                QPlainTextEdit is for plain text editing(no formating).
        """)

        color_dialog_button = QPushButton('Open Color Dialog')
        color_dialog_button.setToolTip('Clicking opens QColorDialog')
        color_dialog_button.setStyleSheet("background-color: lime; color: black;")

        file_dialog_button = QPushButton('Open File Dialog')
        file_dialog_button.setToolTip('Clicking opens QFileDialog')
        file_dialog_button.setStyleSheet("background-color: silver; color: black;")

        message_box_button = QPushButton('Open Message Box')
        message_box_button.setToolTip('Clicking opens QMessageBox')
        message_box_button.setStyleSheet("background-color: #99ffff; color: black;")

        input_dialog_button = QPushButton('Open Input Dialog')
        input_dialog_button.setToolTip('Clicking opens QInputDialog')
        input_dialog_button.setStyleSheet("background-color: grey; color: black;")

        web_view_button = QPushButton('Open Web View')  # Added button for opening web view
        web_view_button.setToolTip('Clicking opens WebView')
        web_view_button.setStyleSheet("background-color: green; color: white;")
        self.web_view = QWebEngineView()  # Added QWebEngineView instance

        # Create layouts
        vbox = QVBoxLayout()
        hbox = QHBoxLayout()
        grid_layout = QGridLayout()
        form_layout = QFormLayout()

        # Add widgets to layouts
        vbox.addWidget(button)
        vbox.addWidget(label)
        vbox.addWidget(line_edit)
        vbox.addWidget(combo_box)
        vbox.addWidget(check_box)
        vbox.addWidget(radio_button1)
        vbox.addWidget(radio_button2)
        vbox.addWidget(spin_box)
        vbox.addWidget(double_spin_box)
        vbox.addWidget(slider)
        vbox.addWidget(progress_bar)
        vbox.addWidget(self.text_edit)  # Adding self.text_edit instead of text_edit
        vbox.addWidget(font_button)
        vbox.addWidget(color_button)
        vbox.addWidget(list_widget)
        vbox.addWidget(table_widget)
        vbox.addWidget(date_time_edit)
        vbox.addWidget(plain_text_edit)
        hbox.addWidget(color_dialog_button)
        hbox.addWidget(file_dialog_button)
        hbox.addWidget(message_box_button)
        hbox.addWidget(input_dialog_button)
        hbox.addWidget(web_view_button)

        # Set the vertical layout as the main layout
        layout = QVBoxLayout()
        layout.addLayout(vbox)
        layout.addLayout(hbox)

        self.setLayout(layout)

        # Connect signals
        color_dialog_button.clicked.connect(self.open_color_dialog)
        file_dialog_button.clicked.connect(self.open_file_dialog)
        message_box_button.clicked.connect(self.open_message_box)
        input_dialog_button.clicked.connect(self.open_input_dialog)
        font_button.clicked.connect(self.change_font)
        color_button.clicked.connect(self.change_color)
        web_view_button.clicked.connect(self.toggle_web_view)  #

        self.setWindowTitle('PyQt5 Basic Widgets')
        self.show()

    def change_font(self):
        font, ok = QFontDialog.getFont()
        if ok:
            self.text_edit.setFont(font)

    def change_color(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.text_edit.setTextColor(color)

    def open_color_dialog(self):
        color_dialog = QColorDialog()
        color_dialog.exec_()

    def open_file_dialog(self):
        file_dialog = QFileDialog()
        file_dialog.exec_()

    def open_message_box(self):
        msg_box = QMessageBox()
        msg_box.setText(f'{self.name}')
        msg_box.exec_()

    def open_input_dialog(self):
        text, ok = QInputDialog.getText(self, 'Input Dialog', 'Enter your name:')
        if ok:
            self.name = 'Your name is: ' + text
            self.open_message_box()
        self.name = None

    def toggle_web_view(self):
        # Load a webpage into the QWebEngineView
        self.web_view.setUrl(QUrl("https://stackoverflow.com/"))
        self.web_view.show()
        # self.web_view.setVisible(not self.web_view.isVisible()) To toggle web view visibility


"""
TABWIDGET AND GROUPBOX
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QTabWidget, QWidget, QVBoxLayout, QGroupBox, QPushButton

class MyMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("TabWidget and GroupBox Example")
        self.setGeometry(100, 100, 400, 300)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout(self.central_widget)

        # Create a QTabWidget
        self.tab_widget = QTabWidget()

        # Create tabs
        tab1 = QWidget()
        tab2 = QWidget()

        # Add tabs to the tab widget
        self.tab_widget.addTab(tab1, "Tab 1")
        self.tab_widget.addTab(tab2, "Tab 2")

        # Add GroupBoxes to each tab
        self.add_groupbox_to_tab(tab1, "Group Box in Tab 1")
        self.add_groupbox_to_tab(tab2, "Group Box in Tab 2")

        self.layout.addWidget(self.tab_widget)

    def add_groupbox_to_tab(self, tab, title):
        groupbox = QGroupBox(title)
        vbox = QVBoxLayout()

        # Add buttons to the group box
        for i in range(1, 4):
            button = QPushButton(f"Button {i}")
            vbox.addWidget(button)

        groupbox.setLayout(vbox)
        layout = QVBoxLayout(tab)
        layout.addWidget(groupbox)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyMainWindow()
    window.show()
    sys.exit(app.exec_())

"""
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())
