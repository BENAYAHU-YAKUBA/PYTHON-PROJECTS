"""
Demonstrates basic forecasting by means of mean imputation, exploring pythons visualization capabilities
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""
SAMPLE DATA
Dates	All Beer Products	Resolved variances/posted breakages	Unresolved Variance
3-Dec-23	-0.276666667	0	-0.276666667
4-Dec-23	1	0	1
5-Dec-23	-2	0	-2
6-Dec-23	-1105	0	-1105
7-Dec-23	1123	0	1123
8-Dec-23	7	0	7
9-Dec-23	0	0	0
10-Dec-23	-27	0	-27
11-Dec-23	39	0	39
12-Dec-23	-46	0	-46
13-Dec-23	-6	2.965	-3.035
14-Dec-23	-1	0	-1
"""
# Load data(replace with actual filepath)
file_path = r'C:\Users\OtienBer\anaconda3\Lib\venv\NI1 Inventory app\warehouse excess and shorts(beer and keg).xlsx'
worksheet_name = 'beer excess and shorts'
df = pd.read_excel(file_path, sheet_name=worksheet_name, parse_dates=['Dates'], index_col='Dates')

# Specify stock take date
stock_take_date = pd.to_datetime('08.01.2024', format='%d.%m.%Y')

# Extract the column of interest
variance_series = df['Unresolved Variances']

# Identify missing dates
missing_dates = pd.date_range(start=df.index[-1] + pd.Timedelta(days=1), end=stock_take_date)

# Calculate the mean of existing unresolved variance values
mean_existing_variance = variance_series.mean()

# Impute missing dates with the mean
variance_series = variance_series.combine_first(pd.Series(mean_existing_variance, index=missing_dates))

# Calculate the total unresolved variance for the stock-take day (includes both actual and imputed)
total_variance = variance_series.sum()

# Calculate the forecasted variances for the missing days (average of existing unresolved variances)
forecasted_variance = variance_series.mean()

# Forecasting
forecast_steps = (stock_take_date - df.index[-1]).days  # Forecast until the stock take date(included)
forecast = pd.Series(forecasted_variance, index=pd.date_range(start=df.index[-1] + pd.Timedelta(days=1),
                                                              periods=forecast_steps, freq='D'))
print("______________________________________FORECAST CHECK___________________________________________________________")
print(f"Forecasting period: {(df.index[-1] + pd.Timedelta(days=1)).date()} - {stock_take_date.date()}(both included)\nTotal Days:{forecast_steps}\n")
# check last operation day and it's variance
last_operation_day = df.index[-1]
last_operation_day_variance = variance_series.loc[last_operation_day]
print(f"Last Operation Day: {last_operation_day}\nLast Operation Day's variance: {last_operation_day_variance}\n")
# check first forecast day and it's variance
first_forecast_day = df.index[-1] + pd.Timedelta(days=1)
first_forecast_day_variance = variance_series.loc[first_forecast_day]
print(f"First forecast day: {first_forecast_day.date()}\nFirst forecast day's variance: {first_forecast_day_variance}\n")
print("CORRECT IMPUTATION" if first_forecast_day_variance == mean_existing_variance else "INCCORRECT IMPUTATION")
print("_______________________________________________________________________________________________________________")

# Calculate accuracy
actual_variance = np.nan  # Replace with the actual variance value if available (e.g., -19.65), else use np.nan
accuracy = 100 if pd.isna(actual_variance) else 100 - (abs(actual_variance - total_variance) / abs(actual_variance) * 100)

# Visualize
plt.figure(figsize=(10, 6))

# Plot the actual variances
plt.plot(variance_series.index, variance_series, label='Actual Variance')

# Highlight the total variance on the stock-take day
plt.scatter(stock_take_date, total_variance, color='red' if total_variance < 0 else 'green', s=100, zorder=5)
plt.text(stock_take_date, total_variance, f'Expected\nVariance: {total_variance:.2f}', ha='left', va='center',
         color='white',
         bbox=dict(facecolor='green', edgecolor='yellow', alpha=0.5))

# Plot the forecasted variances for the missing days
plt.plot(forecast.index, forecast, label='Forecasted Variance', linestyle='--')

# Add data labels for all days with 45-degree rotation
for date, value in variance_series.items():
    plt.text(date, value, f'{value:.2f}', ha='center', va='bottom', rotation=45)

# Rotate x-axis labels
plt.xticks(rotation=45, ha='right')

# Add subtitle with accuracy information
plt.title(f'Forecasting AGL Unresolved Beer Variance for January 2024 stock take\n\n(Accuracy: {accuracy:.2f}%)')

plt.xlabel('Operation Dates')
plt.ylabel('Variance in cases')
plt.legend(loc='center right')
plt.tight_layout()  # Ensures proper layout
plt.show()
