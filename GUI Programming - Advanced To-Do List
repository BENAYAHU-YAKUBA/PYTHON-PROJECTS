import tkinter as tk
from tkinter import messagebox

class TodoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List App")
        self.pending_tasks = []
        self.completed_tasks = []

        # Create frames
        self.left_frame = tk.Frame(root, padx=10, pady=10)
        self.left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.right_frame = tk.Frame(root, padx=10, pady=10)
        self.right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        # Create labels
        self.pending_label = tk.Label(self.left_frame, text="Pending Tasks", font=("Helvetica", 16))
        self.pending_label.pack(pady=10)

        self.completed_label = tk.Label(self.right_frame, text="Completed Tasks", font=("Helvetica", 16))
        self.completed_label.pack(pady=10)

        # Create listboxes
        self.pending_listbox = tk.Listbox(self.left_frame, font=("Helvetica", 14), selectbackground="yellow")
        self.pending_listbox.pack(fill=tk.BOTH, expand=True)

        self.completed_listbox = tk.Listbox(self.right_frame, font=("Helvetica", 14), selectbackground="green")
        self.completed_listbox.pack(fill=tk.BOTH, expand=True)

        # Create entry field
        self.task_entry = tk.Entry(self.left_frame, font=("Helvetica", 14))
        self.task_entry.pack(fill=tk.BOTH, expand=True)

        # Create buttons
        self.add_button = tk.Button(self.left_frame, text="Add Task", command=self.add_task, font=("Helvetica", 14))
        self.add_button.pack(pady=5)

        self.complete_button = tk.Button(self.left_frame, text="Complete Task", command=self.complete_task, font=("Helvetica", 14))
        self.complete_button.pack(pady=5)

        self.clear_button = tk.Button(self.right_frame, text="Clear Completed", command=self.clear_completed, font=("Helvetica", 14))
        self.clear_button.pack(pady=5)

        # Load tasks from file
        self.load_tasks()

    def add_task(self):
        task = self.task_entry.get()
        if task:
            self.pending_tasks.append(task)
            self.update_pending_listbox()
            self.task_entry.delete(0, tk.END)
            self.save_tasks()

    def complete_task(self):
        selected_task = self.pending_listbox.curselection()
        if selected_task:
            task_index = selected_task[0]
            completed_task = self.pending_tasks.pop(task_index)
            self.update_pending_listbox()
            self.completed_tasks.append(completed_task)
            self.update_completed_listbox()
            self.save_tasks()

    def clear_completed(self):
        self.completed_tasks = []
        self.update_completed_listbox()
        self.save_tasks()

    def update_pending_listbox(self):
        self.pending_listbox.delete(0, tk.END)
        for task in self.pending_tasks:
            self.pending_listbox.insert(tk.END, task)

    def update_completed_listbox(self):
        self.completed_listbox.delete(0, tk.END)
        for task in self.completed_tasks:
            self.completed_listbox.insert(tk.END, task)

    def load_tasks(self):
        try:
            with open("tasks.txt", "r") as file:
                lines = file.readlines()
                self.pending_tasks = [line.strip() for line in lines]
                self.update_pending_listbox()
        except FileNotFoundError:
            pass

    def save_tasks(self):
        with open("tasks.txt", "w") as file:
            for task in self.pending_tasks:
                file.write(task + "\n")

def main():
    root = tk.Tk()
    app = TodoListApp(root)
    root.geometry("600x400")
    root.mainloop()

if __name__ == "__main__":
    main()
