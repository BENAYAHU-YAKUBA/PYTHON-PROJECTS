import tkinter as tk


class MyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Programmer's To-Do List App")
        self.pending_tasks = []
        self.completed_tasks = []

        # create frames
        self.left_frame = tk.Frame(root, padx=10, pady=10)  # root is the argument passed to the MyApp class constructor
        self.left_frame.pack(side="left", fill="both", expand=True)

        self.right_frame = tk.Frame(root, padx=10, pady=10)
        self.right_frame.pack(side="right", fill="both", expand=True)

        # add labels
        self.left_label = tk.Label(self.left_frame, text="PENDING TASKS", bg='yellow')
        self.left_label.pack(pady=10)

        self.right_label = tk.Label(self.right_frame, text='COMPLETED TASKS', bg='green', fg='white')
        self.right_label.pack(pady=10)

        # add listbox
        self.pending_tasks_listbox = tk.Listbox(self.left_frame, background='grey', selectbackground='blue',
                                                fg='white')
        self.pending_tasks_listbox.pack(fill='both')

        self.completed_tasks_listbox = tk.Listbox(self.right_frame, background='grey', selectbackground='blue',
                                                  fg='white')
        self.completed_tasks_listbox.pack(fill='both')

        # create entry field
        self.task_entry = tk.Entry(self.left_frame, background="#ADD8E6", highlightcolor='grey')
        self.task_entry.pack(fill="both")

        # create add task button
        self.add_task_button = tk.Button(self.left_frame, background="#98FB98", relief='groove',
                                         command=self.add_tasks, text="Add a task", font=("Helvetica", 14))
        self.add_task_button.pack(pady=5)

        # create complete task button
        self.complete_task_button = tk.Button(self.left_frame, background="#98FB98", relief='groove',
                                              command=self.complete_task, text="Mark task as completed", bg='green',
                                              fg='yellow', font=("Helvetica", 14))
        self.complete_task_button.pack(pady=5)

        # create clear completed task button
        self.clear_completed_task_button = tk.Button(self.right_frame, background="#98FB98", relief='groove',
                                                     command=self.clear_completed_tasks, text="Clear completed tasks",
                                                     bg='red', fg='white', font=("Helvetica", 14))
        self.clear_completed_task_button.pack(pady=5)

        # load tasks to the app
        self.load_tasks()

    def add_tasks(self):
        task = self.task_entry.get().capitalize()
        if task:
            self.pending_tasks.append(task)
            self.update_pending_tasks_listbox()
            self.task_entry.delete(0, tk.END)
            self.save_tasks()

    def complete_task(self):
        selected_task = self.pending_tasks_listbox.curselection()
        if selected_task:
            task_index = selected_task[0]
            completed_task = self.pending_tasks.pop(task_index)
            self.update_pending_tasks_listbox()
            self.completed_tasks.append(completed_task)
            self.update_completed_tasks_listbox()
            self.save_tasks()

    def clear_completed_tasks(self):
        self.completed_tasks = []  # clear the contents of self.completed_tasks
        self.update_completed_tasks_listbox()
        self.save_tasks()

    def update_pending_tasks_listbox(self):
        self.pending_tasks_listbox.delete(0, tk.END)
        for task in self.pending_tasks:
            self.pending_tasks_listbox.insert(tk.END, task)

    def update_completed_tasks_listbox(self):
        self.completed_tasks_listbox.delete(0, tk.END)
        for task in self.completed_tasks:
            self.completed_tasks_listbox.insert(tk.END, task)

    def load_tasks(self):
        try:
            with open("tasks.txt", "r") as file:
                lines = file.readlines()
                self.pending_tasks = []
                self.completed_tasks = []

                pending_section = True
                for line in lines:
                    line = line.strip()
                    if line == "Completed Tasks:":
                        pending_section = False
                    elif pending_section and line != "Pending Tasks:":
                        self.pending_tasks.append(line)
                    elif not pending_section:
                        self.completed_tasks.append(line)

                self.update_pending_tasks_listbox()
                self.update_completed_tasks_listbox()

        except FileNotFoundError:
            pass

    def save_tasks(self):
        with open("tasks.txt", "w") as file:
            file.write("Pending Tasks:\n")
            for task in self.pending_tasks:
                file.write(task + "\n")

            file.write("Completed Tasks:\n")
            for task in self.completed_tasks:
                file.write(task + "\n")


def main():
    root = tk.Tk()
    MyApp(root)
    root.geometry("600x400")
    root.mainloop()


if __name__ == "__main__":
    main()
